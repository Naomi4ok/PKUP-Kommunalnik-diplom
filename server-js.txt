import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
export const firestoreApi = createApi({
 reducerPath: 'firestoreApi',
 baseQuery: firestoreBaseQuery,
 tagTypes: ['Employees'],
 endpoints: builder => ({
   getAll: builder.query<
     any[],
     { collectionName: string; searchField?: string; searchValue?: string }
   >({
     query: ({ collectionName, searchField, searchValue }) => ({
       action: 'getAll',
       collectionName,
       data: { searchField, searchValue },
     }),
     providesTags: (_, __, { collectionName }) => [
       { type: 'Employees', id: collectionName },
     ],
   }),
})
export const { useGetAllQuery } = api;

export const UsersTable = () => {
 const {
   navigate,
   setItemIdToDelete,
   getPaginatedData,
   itemNameToDelete,
   setItemNameToDelete,
   isOpen,
   onClose,
   initiateDelete,
   confirmDelete,
 } = useUsersHook()


 const columns = [
   { key: 'name', title: 'ФИО', sortable: true },
   { key: 'post', title: 'Должность', sortable: true },
   { key: 'department', title: 'Отдел', sortable: false },
   { key: 'start', title: 'Приём на работу', sortable: true },
   { key: 'phone', title: 'Номер телефона', sortable: true },
   { key: 'number', title: 'Табельный номер', sortable: true },
   { key: 'birthday', title: 'Дата рождения', sortable: true },
   { key: 'category', title: 'Категория персонала', sortable: true },
   { key: 'notes', title: 'Примечания', sortable: true },
 ]

 return (
   <>
     <Card className={s.container}>
       <Table.Root className={s.tableRoot}>
         <Table.Head className={s.tableHead} columns={columns} />
         <Table.Body>
           {getPaginatedData().map(item => (
             <Table.Row key={item.id}>
               <Table.TableCell>
                 <div className={s.cellContent} onClick={() => {}}>
                   <Typography
                     as={'p'}
                     className={s.studentNameWithIcon}
                     color={Color.secondary}
                     variant={Variant.link_1}
                   >
                     <img alt={'students-avatar'} className={s.studentsAvatar} src={item.avatar} />
                     {item.name}
                   </Typography>
                 </div>
               </Table.TableCell>
               <Table.TableCell>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.post}
                 </Typography>
               </Table.TableCell>
               <Table.TableCell>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.department}
                 </Typography>
               </Table.TableCell>
               <Table.TableCell>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.start}
                 </Typography>
               <Table.TableCell className={s.dateStudentsCell}>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.birthday}
                 </Typography>
               </Table.TableCell>
               <Table.TableCell className={s.dateStudentsCell}>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.category}
                 </Typography>
               </Table.TableCell>
               <Table.TableCell className={s.dateStudentsCell}>
                 <Typography color={Color.secondary} variant={Variant.body_2}>
                   {item.notes}
                 </Typography>
               </Table.TableCell>
               <Table.TableCell>
                 <div className={s.stylingBlockIcon}>
                   <button
                     aria-label={'Изменить информацию о преподавателе'}
                     className={s.iconAction}
                     onClick={() => navigate(`${PATH.EDIT_EMPLOYEES}/${item.id}`)}
                     type={'button'}
                   >
                     <EditIcon />
                   </button>
                   <button
                     aria-label={'Удалить преподавателя'}
                     className={s.iconAction}
                     onClick={() => initiateDelete(item.id, item.name)}
                     type={'button'}
                   >
                     <DeleteIcon />
                   </button>
                 </div>
               </Table.TableCell>
             </Table.Row>
           ))}
         </Table.Body>
       </Table.Root>
     </Card>
     <NotificationModal
       isOpen={isOpen}
       title={'Удалить сотрудника'}
       message={`Вы действительно хотите удалить сотрудника: ${itemNameToDelete}?`}
       onClose={() => {
         onClose()
         setItemIdToDelete(null)
         setItemNameToDelete(null)
       }}
       onConfirm={confirmDelete}
     />
   </>
 )
}
