import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Modal, Input, Button, message, Row, Col } from 'antd';
import { EnvironmentOutlined, SearchOutlined } from '@ant-design/icons';
import './LocationPicker.css';

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ Leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
  iconUrl: require('leaflet/dist/images/marker-icon.png'),
  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
const MapClickHandler = ({ onLocationSelect }) => {
  useMapEvents({
    click(e) {
      onLocationSelect(e.latlng);
    },
  });
  return null;
};

const LocationPicker = ({ 
  visible, 
  onCancel, 
  onConfirm, 
  defaultLocation = null 
}) => {
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë—Ä–µ—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const DEFAULT_COORDS = [52.0979, 23.7348];
  
  const [selectedPosition, setSelectedPosition] = useState(
    defaultLocation 
      ? [defaultLocation.lat, defaultLocation.lng] 
      : null
  );
  const [address, setAddress] = useState('');
  const [searchAddress, setSearchAddress] = useState('');
  const [isGeocoding, setIsGeocoding] = useState(false);

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const reverseGeocode = async (lat, lng) => {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&zoom=18&addressdetails=1`
      );
      const data = await response.json();
      
      if (data && data.display_name) {
        const formattedAddress = formatAddress(data);
        setAddress(formattedAddress);
        return formattedAddress;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
    return '';
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const formatAddress = (data) => {
    const parts = [];
    
    if (data.address) {
      const addr = data.address;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞
      if (addr.house_number && addr.road) {
        parts.push(`${addr.road}, ${addr.house_number}`);
      } else if (addr.road) {
        parts.push(addr.road);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
      if (addr.city || addr.town || addr.village) {
        parts.push(addr.city || addr.town || addr.village);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
      if (addr.country) {
        parts.push(addr.country);
      }
    }
    
    return parts.length > 0 ? parts.join(', ') : data.display_name;
  };

  // –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
  const searchLocation = async () => {
    if (!searchAddress.trim()) {
      message.warning('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return;
    }

    setIsGeocoding(true);
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(searchAddress)}&limit=1&countrycodes=by`
      );
      const data = await response.json();
      
      if (data && data.length > 0) {
        const result = data[0];
        const lat = parseFloat(result.lat);
        const lng = parseFloat(result.lon);
        
        setSelectedPosition([lat, lng]);
        setAddress(formatAddress(result));
        message.success('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ');
      } else {
        message.error('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
    } finally {
      setIsGeocoding(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
  const handleLocationSelect = async (latlng) => {
    setSelectedPosition([latlng.lat, latlng.lng]);
    const addr = await reverseGeocode(latlng.lat, latlng.lng);
    message.success('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ');
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
  const handleConfirm = () => {
    if (!selectedPosition) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ');
      return;
    }

    onConfirm({
      lat: selectedPosition[0],
      lng: selectedPosition[1],
      address: address || `${selectedPosition[0].toFixed(6)}, ${selectedPosition[1].toFixed(6)}`
    });
  };

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (visible) {
      if (defaultLocation) {
        setSelectedPosition([defaultLocation.lat, defaultLocation.lng]);
        setAddress(defaultLocation.address || '');
      } else {
        setSelectedPosition(null);
        setAddress('');
      }
      setSearchAddress('');
    }
  }, [visible, defaultLocation]);

  return (
    <Modal
      title={
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          <EnvironmentOutlined />
          –í—ã–±–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
        </div>
      }
      open={visible}
      onCancel={onCancel}
      onOk={handleConfirm}
      width={800}
      height={600}
      okText="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
      cancelText="–û—Ç–º–µ–Ω–∞"
      okButtonProps={{ 
        disabled: !selectedPosition,
        icon: <EnvironmentOutlined />
      }}
    >
      <div className="location-picker-container">
        {/* –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É */}
        <Row gutter={[8, 8]} style={{ marginBottom: '16px' }}>
          <Col flex="1">
            <Input
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, –ë—Ä–µ—Å—Ç)"
              value={searchAddress}
              onChange={(e) => setSearchAddress(e.target.value)}
              onPressEnter={searchLocation}
              prefix={<SearchOutlined />}
            />
          </Col>
          <Col>
            <Button 
              type="primary" 
              icon={<SearchOutlined />}
              onClick={searchLocation}
              loading={isGeocoding}
            >
              –ù–∞–π—Ç–∏
            </Button>
          </Col>
        </Row>

        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å */}
        {selectedPosition && (
          <div className="selected-location-info">
            <p><strong>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong></p>
            <p>{address || `${selectedPosition[0].toFixed(6)}, ${selectedPosition[1].toFixed(6)}`}</p>
          </div>
        )}

        {/* –ö–∞—Ä—Ç–∞ */}
        <div className="map-container">
          <MapContainer
            center={selectedPosition || DEFAULT_COORDS}
            zoom={selectedPosition ? 16 : 13}
            style={{ height: '400px', width: '100%' }}
            key={selectedPosition ? `${selectedPosition[0]}-${selectedPosition[1]}` : 'default'}
          >
            <TileLayer
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            
            <MapClickHandler onLocationSelect={handleLocationSelect} />
            
            {selectedPosition && (
              <Marker position={selectedPosition} />
            )}
          </MapContainer>
        </div>

        <p className="map-instruction">
          üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∞–¥—Ä–µ—Å—É
        </p>
      </div>
    </Modal>
  );
};

export default LocationPicker;